# -*- coding: utf-8 -*-
"""JadavpurTask.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q-l8mV_9YA41t40LnxxpmSCvvsS0jNc5
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import json
import seaborn as sns
import matplotlib.pyplot as plt
from google.colab import files

ev_file_location = "/content/Electric_Vehicle_Population_Data.csv"
ev_data = pd.read_csv(ev_file_location)

print(" EV Dataset Successfully Loaded!")
print("Dataset Dimensions:", ev_data.shape)
print("\nPreview of Data:\n", ev_data.head())
print("\nChecking for Missing Values:\n", ev_data.isnull().sum())

selected_features = [
    "County", "City", "State", "Postal Code", "Model Year",
    "Make", "Model", "Electric Vehicle Type", "Electric Range", "Base MSRP"
]

ev_data_processed = ev_data[selected_features].copy()

ev_data_processed.columns = [col.lower().replace(" ", "_") for col in ev_data_processed.columns]

ev_data_processed["electric_range"] = ev_data_processed["electric_range"].apply(lambda x: x if pd.notna(x) else ev_data_processed["electric_range"].median())
ev_data_processed["base_msrp"] = ev_data_processed["base_msrp"].apply(lambda x: x if pd.notna(x) else ev_data_processed["base_msrp"].median())

ev_data_processed = ev_data_processed[(ev_data_processed.electric_range >= 0) & (ev_data_processed.base_msrp >= 0)]

print("\n Data Cleaning Completed! Final Dataset Shape:", ev_data_processed.shape)


# 1 Popular EV Manufacturers (Top 10)
top_ev_makers = ev_data_processed["make"].value_counts().nlargest(10)
print("\n Leading EV Brands:\n", top_ev_makers)

# 2️ EV Growth Trend Over Years
ev_year_trend = ev_data_processed.groupby("model_year").size()
print("\n EV Adoption Trend by Year:\n", ev_year_trend)

# 3️ Distribution of BEV vs PHEV
ev_type_counts = ev_data_processed.groupby("electric_vehicle_type").size()
print("\n EV Type Distribution:\n", ev_type_counts)

# 4️ Pricing vs Range Correlation
correlation_matrix = ev_data_processed[["base_msrp", "electric_range"]].corr()
print("\n Price-Range Correlation:\n", correlation_matrix)

# 5️ EV Distribution by State (Top 10)
ev_state_trend = ev_data_processed["state"].value_counts().nlargest(10)
print("\n Top 10 States with Most EVs:\n", ev_state_trend)

# 6️ Average Cost & Range by Top 5 Manufacturers
avg_stats_per_brand = ev_data_processed.groupby("make")[["base_msrp", "electric_range"]].mean().sort_values(by="base_msrp").head(5)
print("\n Avg Price & Range (Top 5 Brands):\n", avg_stats_per_brand)

# 7️ Most Affordable EVs with Best Range
ev_data_processed["cost_per_mile"] = ev_data_processed["base_msrp"] / ev_data_processed["electric_range"]
best_value_evs = ev_data_processed.nsmallest(5, "cost_per_mile")
print("\n Best Value EVs (Top 5):\n", best_value_evs[["make", "model", "model_year", "base_msrp", "electric_range", "cost_per_mile"]])

plt.figure(figsize=(8, 5))
sns.countplot(y=ev_data_processed["electric_vehicle_type"], palette="coolwarm")
plt.title("Electric Vehicle Type Distribution")
plt.xlabel("Count")
plt.ylabel("EV Type")
plt.show()

plt.figure(figsize=(10, 5))
sns.barplot(x=top_ev_makers.index, y=top_ev_makers.values, palette="viridis")
plt.title("Top 10 EV Manufacturers")
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(10, 5))
sns.lineplot(x=ev_year_trend.index, y=ev_year_trend.values, marker="o", color="b")
plt.title("Yearly EV Adoption Trend")
plt.xlabel("Model Year")
plt.ylabel("EV Count")
plt.show()

ev_json_output = ev_data_processed.to_json(orient="records", indent=4)

json_output_path = "/content/ev_data.json"
with open(json_output_path, "w") as json_file:
    json_file.write(ev_json_output)

print("\n Processed EV Data Saved as JSON")

files.download(json_output_path)